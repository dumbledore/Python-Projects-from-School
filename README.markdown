<h1>Безплатна бира</h1> 
 
<p>Python е свободен като словото, но и безплатен като бирата. Целта на задачата
е да напишете проста функция, която брои поредни числа, но от време на време
черпи и по бира.</p> 
 
<p>Функцията трябва да се казва <code>freebeer</code> и да приема един аргументa
на име <code>n</code>.</p> 
 
<p>Функцията трябва да връща низ с числата от 1 до <code>n</code> (включително),
в който числата, които се делят на 3 са заместени с думата <code>free</code>,
числата, които се делят на 5 са заместени от думата <code>beer</code>, а
числата, които се делят и на 3 и на 5 са заместени с <code>freebeer</code>.
Отделните числа и думи трябва да са разделени със празно място, но не трябва да
има излишни празни места в края на низа.</p> 
 
<p>Пример:</p> 
 
<pre class="python"><code>&gt;&gt;&gt; freebeer(15)&#x000A;'1 2 free 4 beer free 7 8 free beer 11 free 13 14 freebeer'</code></pre> 
 
<p><strong>Съвет:</strong> Ако имате проблем с излишно празно място на края на
низа, прочетете <code>help(str)</code> в интерпретатора, за да намерите метод,
който да го премахне.</p> 

<h1>Пет дребни функции</h1> 
 
<p>Функционалното програмиране дели питонското общество на два лагера &#8211;
тези които го харесват и всички останали*. Без значение къде попадате, трябва да
умеете функционалния стил, ако искате да ви вземат насериозно като питонист.
Тази задача ще ви помогне да развиете умения.</p> 
 
<p>Имплементирайте следните пет функции:</p> 
 
<h2>one</h2> 
 
<pre class="python"><code>def one(seq): ...</code></pre> 
 
<p>В Python има <code>all</code> и <code>any</code>. Но няма <code>one</code>.
Дефинирайте функция <code>one</code>, която да връща истина когато в
<code>seq</code> има точно един елемент, който се оценява като истина.
Демек:</p> 
 
<pre><code>one([0, 0, 0]) # False&#x000A;one([0, 4, 0]) # True&#x000A;one([False, 8, 0]) # True&#x000A;one([False, 8, 6, 0]) # False&#x000A;&#x000A;one(x / y for x, y in ((1, 2), (3, 4), (5, 0))) # False</code></pre> 
 
<p>Имплементирайте оценката на елементите в списъка мързеливо &#8211; ако
оцените два елемента от <code>seq</code> като истина, това ви гарантира че
<code>one</code> трябва да върне <code>False</code> и няма нужда да проверявате
следващите елементи. Обърнете внимание, че последния пример връща
<code>False</code>, а не предизвиква <code>ZeroDivisionError</code></p> 
 
<h2>inject</h2> 
 
<p><code>inject</code> (наричан още <code>reduce</code>, <code>fold</code> или
<code>accummulate</code>) е функция от по-висок ред, която свежда списък до
единствена стойност. Типичен пример е да ползвате
<code>inject(операция_събиране, списък_с_числа, първоначална_стойност)</code> за
да получите сбора на числа в списък. Типичната употреба е нещо такова:</p> 
 
<pre class="python"><code>def imaginary_inject(fun, seq, init): pass&#x000A;&#x000A;imaginary_inject(lambda a, b: a + b, [2, 3, 5, 7, 11, 13], 1) == 42&#x000A;imaginary_inject(lambda a, b: a * b, [1, 2, 3, 4], 1) == 24&#x000A;imaginary_inject(lambda a, b: a * b, [1, 2, 3, 4], 0) == 0</code></pre> 
 
<p>Изчислението протича (горе-долу) така: извиква се <code>fun(init,&#x000A;seq[0])</code>, след което резултата се подава на <code>fun</code> като първи
аргумент, а <code>seq[1]</code> отива като втори. Този резултат се предава
отново на <code>fun</code> със <code>seq[2]</code> и така докато изчерпате
<code>seq</code>.</p> 
 
<p>Може да се каже, че:</p> 
 
<pre class="python"><code>imaginary_inject(fun, [1, 2, 3], 0) == fun(fun(fun(0, 1), 2), 3)</code></pre> 
 
<p>Ние искаме нещо по-алтаво. <code>inject</code> трябва да приема функция и да
връща нова функция, приемаща списък и първоначална стойност.
<code>imaginary_inject(fun, [1, 2, 3], 0)</code> изглежда така:</p> 
 
<pre class="python"><code>injector = inject(fun)&#x000A;injector([1, 2, 3], 0)&#x000A;&#x000A;# или&#x000A;&#x000A;inject(fun)([1, 2, 3], 0)</code></pre> 
 
<p>Допълнително, ако върната от <code>inject</code> функция получи само един
списък, използва първия елемент от списъка като <code>init</code>.</p> 
 
<p>Понеже няколко реда код често е по-красноречив от няколко страници текст,
<code>inject</code> трябва да се държи така:</p> 
 
<pre class="python"><code>inject(lambda x, y: x + y)([1, 2, 3, 4], 0) == 10&#x000A;inject(lambda x, y: x + y)([1, 2, 3, 4]) == 10&#x000A;&#x000A;inject(lambda x, y: x * y)([1, 2, 3, 4], 1) == 24&#x000A;inject(lambda x, y: x * y)([1, 2, 3, 4]) == 24&#x000A;inject(lambda x, y: x * y)([0, 1, 2, 3, 4]) == 0&#x000A;&#x000A;sum = inject(lambda x, y: x + y)&#x000A;sum([1, 2, 3, 4]) == 10&#x000A;&#x000A;product = inject(lambda x, y: x * y)&#x000A;product([1, 2, 3, 4]) == 24</code></pre> 
 
<h2>unfold</h2> 
 
<pre class="python"><code>def unfold(initial, step, condition, skip = None): pass</code></pre> 
 
<p><code>unfold</code> е обратното на <code>inject</code> (още известен като
<code>fold</code>). Той трансформира единична стойност в списък. Приема три
аргумента -- първоначална стойност, функция с която да получи от една стойност
следващата и предикат, който определя докога да се изчисляват нови
стойности.</p> 
 
<pre class="python"><code>unfold(1, lambda x: x + 1, lambda x: x &lt; 5) == [1, 2, 3, 4]</code></pre> 
 
<p>В този случай, първоначалната стойност е 1, стъпката е увеличаване с едно
(<code>lambda x: x + 1</code>), а елементите се произвеждат докато числата са
по-малки от пет (<code>lambda x: x &lt; 5</code>).</p> 
 
<p>Ето още няколко примера:</p> 
 
<pre class="python"><code>unfold(3, lambda x: x + 1, lambda x: x &lt; 5) == [3, 4]&#x000A;unfold(3, lambda x: x + 1, lambda x: x &lt; 0) == []&#x000A;unfold(1, lambda x: x + 2, lambda x: x &lt; 10) == [1, 3, 5, 7, 9]</code></pre> 
 
<p><code>skip</code> е опционален четвърти аргумент. Ако е подаден, елементите
за които връща истина, се изпускат от списъка:</p> 
 
<pre class="python"><code>unfold(1, lambda x: x + 1, lambda x: x &lt; 10, lambda x: x % 2 == 0) == [1, 3, 5, 7, 9]&#x000A;unfold(1, lambda x: x + 1, lambda x: x &lt; 10, lambda x: x &gt; 4) == [1, 2, 3, 4]</code></pre> 
 
<h2>theta</h2> 
 
<pre class="python"><code>def theta(predicate, *sequences): pass</code></pre> 
 
<p>Theta join е любопитна концепция в SQL. В LINQ се нарича просто join.
Функцията приема предикат и няколко списъка и връща подмножеството на
декартовото произведение на тези списъци, за което предикатът се оценява като
истина. Редът няма значение.</p> 
 
<pre class="python"><code>theta(lambda x, y: x + 1 == y, [1, 3], [2, 4]) == [(1, 2), (3, 4)]&#x000A;theta(lambda x, y: x &lt; y, [2, 5], [3, 6]) == [(2, 3), (2, 6), (5, 6)]&#x000A;theta(lambda x, y, z: x*x + y*y == z*z, range(1, 10), range(1, 10), range(1, 10)) == [(3, 4, 5), (4, 3, 5)]</code></pre> 
 
<p>Резултатът трябва да е списък (поредица) от n-орки. Редът им няма
значение.</p> 
 
<h2>memoize</h2> 
 
<pre class="python"><code>def memoize(fun): pass</code></pre> 
 
<p>Някои функции като <code>random()</code> връщат различно нещо всеки път, но
други като <code>x + y</code> или <code>fib(n)</code> са "чисти" &#8211;
стойността им зависи само от аргументите. Смятането на <code>fib(n)</code> може
да бъде изключително бавно. Затова е удобно резултатите да се запомнят някъде
(например в речник). При следващи извиквания се използват вече запомнените
резултати, вместо функцията да се смята отново.</p> 
 
<p><code>memoize(fun)</code> връща друга функция &#8211; мемоизиращ вариант на
<code>fun</code>, заедно с функция, която ще ни дава графиката на запомнените
стойности (реда няма значение):</p> 
 
<pre class="python"><code>f = lambda x: x * 2&#x000A;h, graph = memoize(f)&#x000A;&#x000A;h(0) == f(0)&#x000A;h(2) == f(2)&#x000A;set(graph()) == {(0, 0), (2, 4)}&#x000A;&#x000A;h(10) == f(10)&#x000A;set(graph()) == {(0, 0), (2, 4), (10, 20)}</code></pre> 
 
<p>Можем да мемоизираме функции на няколко аргумента:</p> 
 
<pre class="python"><code>f = lambda x, y: x**2 + x*y + y**2&#x000A;h, graph = memoize(f)&#x000A;&#x000A;h(0, 0) == f(0, 0)&#x000A;h(1, 1) == f(1, 1)&#x000A;h(2, 2) == f(2, 2)&#x000A;&#x000A;set(graph()) == {(1, 1, 3), (0, 0, 0), (2, 2, 12)}</code></pre> 
 
<p>Графиката на функция на n аргумента се състои от n+1-орки &#8211; първите n
елемента са аргумените, а последният е стойността на функцията.</p> 
 
<p><strong>Важно:</strong> <code>h</code> вика <code>f</code> най-много по
веднъж за дадени аргументи!</p> 
 
<h1>HTML</h1> 
 
<p>Проблем: писането на HTML не е приятно. Ще се опитаме да променим това с
прост текстов формат.</p> 
 
<h2>kiss</h2> 
 
<p>Напишете функция <code>kiss(text)</code>, която преобразува текст в долния
формат до HTML.</p> 
 
<h2>Параграфи и нови редове</h2> 
 
<p>Всеки самотен нов ред трябва да се замени с <code>&lt;br /&gt;</code>. Всяка
последователност от повече от един знак за нов ред указва нов параграф. Текстът
във всеки параграф трябва да е ограден от <code>&lt;p&gt;</code> и
<code>&lt;/p&gt;</code>.</p> 
 
<pre><code>Яздих, яздих, докато се наяздих.&#x000A;После спрях.&#x000A;&#x000A;А след следобедната закуска светът беше прекрасен.</code></pre> 
 
<p>става на</p> 
 
<pre><code>&lt;p&gt;Яздих, яздих, докато се наяздих.&lt;br /&gt;&#x000A;После спрях.&lt;/p&gt;&#x000A;&#x000A;&lt;p&gt;А след следобедната закуска светът беше прекрасен.&lt;/p&gt;</code></pre> 
 
<ul> 
	<li>Не оставяйте празни параграфи.</li> 
 
	<li>Махнете <code>&lt;br /&gt;</code> от началото и края на параграфите.</li> 
</ul> 
 
<h2>Заглавия</h2> 
 
<p>Ако един ред започва и завършва с един и същ брой знака за равно (?6), то той
се заменя със съответното заглавие:</p> 
 
<pre><code>== Баба ==</code></pre> 
 
<p>става на</p> 
 
<pre><code>&lt;h2&gt;Баба&lt;/h2&gt;</code></pre> 
 
<ul> 
	<li>Заглавията също указват край на параграф.</li> 
 
	<li>Заглавията никога не се намират в параграф.</li> 
</ul> 
 
<h2>Списъци</h2> 
 
<p>Няколко (&gt;1) последователни реда започващи с <code>*</code> трябва да се
оформят в списък:</p> 
 
<pre><code>Домашни любимци:&#x000A;* Куче&#x000A;* Котка&#x000A;* Моторна резачка</code></pre> 
 
<p>става на</p> 
 
<pre><code>&lt;p&gt;Домашни любимци:&lt;/p&gt;&#x000A;&lt;ul&gt;&#x000A;&lt;li&gt;Куче&lt;/li&gt;&#x000A;&lt;li&gt;Котка&lt;/li&gt;&#x000A;&lt;li&gt;Моторна резачка&lt;/li&gt;&#x000A;&lt;/ul&gt;</code></pre> 
 
<ul> 
	<li>Всеки елемент на списъка не е по-дълъг от един ред.</li> 
 
	<li>Между елементите на списъка няма празни редове.</li> 
 
	<li>Списъците също указват край на параграф.</li> 
 
	<li>Списъците никога не се намират в параграф.</li> 
 
	<li>Ако нещо прилича на списък, но не отговаря на горните условия, не го
	пипайте.</li> 
</ul> 
 
<h2>Коментари</h2> 
 
<p>Всеки ред, започващ с <code>#</code> се игнорира не се включва в
резултата.</p> 
 
<h2>Адреси</h2> 
 
<p>Ако намерите интернет адреси ги преобразувайте до връзки:</p> 
 
<pre><code>Здрасти, това е моят сайт: http://unhappyhipsters.com/. А пощата ми е: pop@armenia.com. Пишете ми!</code></pre> 
 
<p>става на</p> 
 
<pre><code>Здрасти, това е моят сайт: &lt;a href="http://unhappyhipsters.com/"&gt;http://unhappyhipsters.com/&lt;/a&gt;. А пощата ми е: &lt;a href="mailto: pop@armenia.com"&gt;pop@armenia.com&lt;/a&gt;. Пишете ми!</code></pre> 
 
<ul> 
	<li>В адресите няма празни места.</li> 
 
	<li>Адресите никога не завършват на препинателен знак (точка, запетая,
	въпросителен или удивителен знак). Ако един иначе валиден адрес завършва на
	препинателен знак, не включвайте препинателния знак във връзката, но не го
	премахвайте от текста.</li> 
 
	<li><code>pipo.morkova@example.org</code>,
	<code>bullet_40_proof@example.org</code> и
	<code>mityo+the+python@people.example.org</code> са все валидни адреси.
	<code>mityo@python</code> не е.</li> 
 
	<li>Домейните са само на латиница и могат да включват само буквите от
	английската азбука, цифри, точка и тире.</li> 
 
	<li>Пътят може да съдържа само буквите от английската азбука, цифри, права
	наклонена черта, точка, долна черта, тире, въпросителен знак, амперсанд или
	#</li> 
 
	<li>Непощенските адреси започват с <code>http://</code></li> 
 
	<li>Потребителското име на e-mail адрес може да включва само буквите от
	английската азбука, цифри, точка, долна черта или плюс.</li> 
</ul> 
 
<h2>Специален текст</h2> 
 
<pre><code>[iamsocool]Примигвам, примигвам!&#x000A;Ослепявам, ослепявам![/iamsocool]</code></pre> 
 
<p>става на</p> 
 
<pre><code>&lt;span class="iamsocool"&gt;Примигвам, примигвам!&#x000A;Ослепявам, ослепявам!&lt;/span&gt;</code></pre> 
 
<pre><code>Казаха ми, че [weak]съм силен[/weak] и, че гълъбите не ядат сникърси.&#x000A;&#x000A;А после не бяха прави.</code></pre> 
 
<p>става на</p> 
 
<pre><code>&lt;p&gt;Казаха ми, че &lt;span class="weak"&gt;съм силен&lt;/span&gt; и, че гълъбите не ядат сникърси.&lt;/p&gt;&#x000A;&#x000A;&lt;p&gt;А после не бяха прави.&lt;/p&gt;</code></pre> 
 
<ul> 
	<li>Името на класа винаги е с малки букви от английската азбука.</li> 
 
	<li>Ако в текста има отварящ <code>[xxx]</code>, то има и затварящ. И
	обратно.</li> 
 
	<li>В специалния текст никъде няма повече от един последоватален знак за нов
	ред.</li> 
 
	<li>Специалният текст не променя по никакъв начин правилата за параграфи и нови
	редове. Той не е параграф сам по себе си и ако е самичък в параграф трябва да
	бъде ограден от <code>&lt;p&gt;</code>.</li> 
</ul> 
 
<h2>Още важни неща</h2> 
 
<ul> 
	<li>Не ни интересува празното място. Няма разлика къде и по колко слагате от
	него.</li> 
 
	<li>Не се притеснявайте за бързодействието на вашата програма. Опитайте да я
	напишете така, че да се чете и разбира лесно от хора.</li> 
 
	<li>Регулярните изрази са необходимост, но не са панацея.</li> 
</ul> 

<h1>Geometry Classes</h1>
<p>Да се имплементира модул за работа с обекти в разширеното двумерно евклидово
пространство.</p> 
 
<p>Модулът трябва да предостави следните класове: <code>Point</code>,
<code>Vector</code>, <code>Line</code>, <code>GeometricError</code></p> 
 
<h2>Вектор</h2> 
 
<p>Класът <code>Vector</code> предоставя следната функционалност:</p> 
 
<ul> 
	<li>Конструктор: <code>Vector(x, y)</code></li> 
 
	<li>Оператори <code>==</code> и <code>!=</code> за сравняване на вектори. (2
	вектора са равни ако посоките и дължините им съвпадат)</li> 
 
	<li>Възможност за ползване на функциите repr и str, като за всеки вектор
	<code>vect</code> е изпълнено: <code>eval(repr(vect)) == vect</code></li> 
 
	<li>Бинарни оператори <code>+ - *</code>, като те са съответно: векторен сбор;
	векторна разлика и скаларно произведение на вектори.</li> 
 
	<li>Бинарен оператор <code>*?</code>, умножаващ вектор по число (забележка:
	векторите могат да се умножават скаларно и по други вектори)</li> 
 
	<li>Бинарен оператор <code>/?</code>, делящ вектор на число.</li> 
 
	<li>Унарни оператори <code>+ -</code>, като те са съответно: идентитет на
	вектора; противоположен вектор</li> 
 
	<li>Метод <code>vect.length()</code>, връщащ дължината на вектора
	<code>vect</code>.</li> 
 
	<li>Метод <code>vect.scaled(number)</code>, връщащ <em>нов</em> вектор, който
	отговаря на вектора <code>vect</code> умножен с числото
	<code>number</code>.</li> 
 
	<li>Метод <code>vect.normalized()</code>, връщащ <em>нов</em> вектор, отговарящ
	на нормализиран <code>vect</code> (т.е. има същата посока като <code>vect</code> 
	и дължина 1)</li> 
 
	<li>Метод <code>vect.normal()</code>, връщащ <em>нов</em> вектор, със същата
	дължина като <code>vect</code>, и посока перпендикулярна на <code>vect</code> 
	(забележка: в 2-мерно пространство тези вектори са два. Няма значение кой от тях
	ще върнете)</li> 
 
	<li>Методи <code>vect.iscollinear(vect2)</code> и
	<code>vect.isnormal(vect2)</code>, които връщат <code>True</code>, ако векторите
	са съответно колинеарни или перпендикулярни и <code>False</code> - в противен
	случай.</li> 
 
	<li>Метод <code>vect.isnormalized()</code> връщащ <code>True</code>, ако
	дължината на вектора е 1.</li> 
 
	<li>Metod <code>vect.iszero()</code>, връщащ <code>True</code>, ако дължината на
	вектора е 0 (нулев вектор).</li> 
</ul> 
 
<h2>Точка</h2> 
 
<p>Класът <code>Point</code> описва точка от разширената евклидова равнина.</p> 
 
<p>Уточнения: В разширената евклидова равнина точките представляват тройки
<code>(x, y, z)</code> Ако z=0, наричаме точката безкрайна. Ако z?0, то тази
точка съвпада с точката в (не-разширено) евклидово пространство с координати
<code>(x', y')</code>, като е изпълнено: <code>x', y' = x/z, y/z</code></p> 
 
<p>Класът предоставя следната функционалност:</p> 
 
<ul> 
	<li>Конструктор: <code>Point(x, y, z=1)</code>.</li> 
 
	<li>Оператори <code>==</code> и <code>!=</code> за сравняване на точки.
	(забележка: точките <code>(x, y, z)</code> и <code>(c*x, c*y, c*z)</code> 
	съвпадат, за всяка реална константа <code>c?</code>)</li> 
 
	<li>Възможност за ползване на функциите <code>repr</code> и <code>str</code>,
	като за всяка точка <code>p?</code> е изпълнено: <code>eval(repr(p)) ==&#x000A;	p</code></li> 
 
	<li>Метод <code>p.isinfinite()</code>, връщащ <code>True</code>, ако точката е
	безкрайна.</li> 
 
	<li>Метод <code>p.distance(other)</code>, връщащ разстояние между две точки, ако
	<code>other</code> е точка и разстояние между точка и права, ако
	<code>other</code> е права.</li> 
</ul> 
 
<h2>Права</h2> 
 
<p>Класът <code>Line</code> описва права. Интересно е, че тя може да се
представи (еднозначно) по няколко начина.</p> 
 
<ul> 
	<li>Уравнение на права: <code>ax + by + cz = 0</code></li> 
 
	<li>Начална точка и вектор: <code>{p + k*v}</code>, където <code>k?</code> -
	произволно реално число, <code>p?</code> - точка, <code>v?</code> - вектор.</li> 
 
	<li>Две точки p1, p2 (p1 ? p2)</li> 
</ul> 
 
<p>Изборът кой начин да ползвате е изцяло ваш.</p> 
 
<p>Уточнения: Правата, минаваща през кои да е две безкрайни точки е безкрайната
права. Тя е единствена и съдържа всички безкрайни точки. Права, съдържаща крайна
точка и безкрайна точка е валидна и не-безкрайна права.</p> 
 
<p>Класът предоставя следната функционалност:</p> 
 
<ul> 
	<li>Конструкор <code>Line(a, b)</code>, приемащ 2 точки <em>или</em> вектор и
	точка.</li> 
 
	<li>Оператори <code>==</code> и <code>!=</code> за сравняване на прави.
	(забележка: ако правите съдържат едни и същи точки, то те са равни)</li> 
 
	<li>Оператор <code>v in l</code>, който за точка <code>v?</code> и права
	<code>l?</code> връща <code>True</code>, само ако точката лежи на правата.</li> 
 
	<li>Оператор <code>*?</code>, връщащ пресечната точка на две прави. (забележка:
	успоредни прави се пресичат в безкрайна точка; безкрайната права и не-безкрайна
	- също)</li> 
 
	<li>Възможност за ползване на функциите <code>repr</code> и <code>str</code>,
	като за всяка права <code>l?</code> е изпълнено: <code>eval(repr(l)) ==&#x000A;	l</code></li> 
 
	<li>Метод <code>l.isinfinite()</code>, връщащ <code>True</code>, ако правата
	съвпада с безкрайната права</li> 
 
	<li>Метод <code>l.distance(p)</code>, връщащ разстоянието от правата до точката
	<code>p?</code></li> 
 
	<li>Метод <code>l.isparallel(other)</code>, връщащ <code>True</code>, ако
	правите <code>l?</code> и <code>other</code> са успоредни (забележка: всяка
	права е успоредна със себе си)</li> 
 
	<li>Методи <code>l.colinear_vector()</code> и <code>l.normal_vector()</code>,
	връщащи съответно колинеарен и нормален (перпендикулярен) вектор на правата.
	(забележка: дължината и направлението на върнатите вектори са без значение)</li> 
</ul> 
 
<h2>Геометрична грешка</h2> 
 
<p>Класът <code>GeometricError</code> ще ползваме, както за всевъзможните
невалидни извиквания, така и за недефинирано поведение на нашите методи. Той
(естествено) трябва да бъде наследник на Exception. Ако сте сигурни, че нещо е
невалидно или недефинирано - вдигайте това изключение.</p> 
 
<p>В следните ситуации ползването му е задължително:</p> 
 
<ul> 
	<li>Пресичане на права със себе си</li> 
 
	<li>Строене на права по две съвпадащи точки</li> 
 
	<li>Строене на права по точка и нулев вектор</li> 
 
	<li>Нормализиране на нулев вектор</li> 
</ul> 

<h1>Unit tests, decorators and metaclasses</h1>

<p>Ще си поиграем с unit тестове, декоратори и метакласове.</p> 
 
<h2>unit_converter</h2> 
 
<p>Напишете динамичен декоратор <code>unit_converter(a, b)</code>, който да
приема функция, която връща числов резултат, и обръща резултата й от една мерна
единица към друга - например от инчове към сантиметри.</p> 
 
<p><code>unit_converter(a, b)</code> трябва да конвертира резултата
<code>x</code> на функцията по формулата <code>ax + b</code>.</p> 
 
<p>Пример:</p> 
 
<pre><code>@unit_converter(1.8, 32)&#x000A;def celsius_function():&#x000A;    return 18.0; # градуси по целзий&#x000A;&#x000A;&gt;&gt;&gt; print(celsius_function()) # връща градуси по фаренхайт&#x000A;64.4&#x000A;# 1.8 * 18.0 + 32 = 64.4</code></pre> 
 
<p>Като всеки добър декоратор, и този трябва позволява декорираната функцията да
има произволен брой и вид аргументи.</p> 
 
<h2>Unit test</h2> 
 
<p>Ваш колега е написал функция <code>is_prime(x)</code>, която връща
<code>True</code> ако <code>x</code> е просто число.</p> 
 
<p>Не сте сигурни дали функцията работи както трябва, за това трябва да напишете
unit тест клас, наречен IsPrimeTest, който да тества функцията.</p> 
 
<p>Вашият клас трябва да има следните тестове:</p> 
 
<ul> 
	<li><code>testBasic()</code>, който проверява поведението на
	<code>is_prime()</code> при 1, 2, 4, 6 и 7</li> 
 
	<li><code>testNegative()</code>, за поведението на <code>is_prime()</code> при
	отрицателни числа (<code>is_prime()</code> би трябвало да върне
	<code>False</code>)</li> 
 
	<li><code>testNonNumber()</code>, за поведението на <code>is_prime()</code> при
	не-числа (<code>is_prime()</code> ще хвърли exception)</li> 
 
	<li><code>testRandom()</code>, за поведението на is_prime() при 10,000 случайно
	генерирани числа, които да сравнявате с ваша имплементация на функцията с друго
	име</li> 
</ul> 
 
<p>Трябва да спазвате протокола за unit тестове на Python, включително да
наследявате правилния клас.</p> 
 
<p>Функцията <code>is_prime()</code>, която трябва да тествате, се намира в
примерния тест <a href="/sample-tests/09-10/p10sample.py">p10sample.py</a>. За
да я използвате напишете</p> 
 
<p><code>from p10sample import is_prime</code>.</p> 
 
<h2>Метакласове</h2> 
 
<p>Напишете метаклас <code>NegativeMeta</code>, който за всеки метод
<code><b>x</b></code> от оригиналния клас да създава метод
<code>not_<b>x</b></code>, който да приема същите аргументи, но да връща
отрицателния булеви резултат (с <code>not</code>).</p> 
 
<p>Пример:</p> 
 
<pre><code>class Comparer(metaclass = NegativeMeta):&#x000A;    def __init__(self, a):&#x000A;        self.a = a&#x000A;&#x000A;    def is_bigger_than(self, b):&#x000A;        return self.a &gt; b&#x000A;&#x000A;&gt;&gt;&gt; twenty = Comparer(20)&#x000A;&gt;&gt;&gt; print('not_is_bigger_than' in dir(twenty))&#x000A;True&#x000A;&gt;&gt;&gt; print(twenty.is_bigger_than(40))&#x000A;False&#x000A;&gt;&gt;&gt; print(twenty.not_is_bigger_than(40))&#x000A;True</code></pre> 
 
<p>Няма нужда да проверявате дали вече има метод с име
<code>not_<b>x</b></code>. Методите, започващи с __ също можете да оставите на
мира.</p> 
 
<h2>Метакласове 2</h2> 
 
<p>Напишете втора версия на <code>NegativeMeta</code>, наречена
<code>NegativeMetaDynamic</code>, която се държи по същия начин, но изпълнява
методите <code>not_<b>x</b></code> динамично, вместо да ги създава при
дефинирането на класа.</p> 
 
<p>Пример:</p> 
 
<pre><code>class Comparer2(metaclass = NegativeMetaDynamic):&#x000A;    def __init__(self, a):&#x000A;        self.a = a&#x000A;&#x000A;    def is_bigger_than(self, b):&#x000A;        return self.a &gt; b&#x000A;&#x000A;&gt;&gt;&gt; twenty = Comparer2(20)&#x000A;&gt;&gt;&gt; print('not_is_bigger_than' in dir(twenty)) # !!!&#x000A;False&#x000A;&gt;&gt;&gt; print(twenty.is_bigger_than(40))&#x000A;False&#x000A;&gt;&gt;&gt; print(twenty.not_is_bigger_than(40))&#x000A;True</code></pre> 

